/* global ActiveText, BugClub */
/**
 * @class BugClub.ActivitySummaryIndividual
 * @memberOf BugClub
 * @returns {{init: init, getData: getData}}
 * @constructor
 */
BugClub.ActivitySummaryIndividual = function() {
    'use strict';

    /**
     * @type {ActiveText}
     */
    var activeTextInstance;

    /**
     * @type {Object}
     */
    var individualResponses;

    /**
     * @type {BugClub.ActivitySummaryIndividual}
     */
    var context;

    var CHANGE = 'change';

    function init(instance) {
        activeTextInstance = instance;

        /* jshint validthis:true */
        context = this;

        $(activeTextInstance).off(ActiveText.Events.LOADED_OVERLAY_DATA, onOverlayDataLoaded).on(ActiveText.Events.LOADED_OVERLAY_DATA, onOverlayDataLoaded);
        $(activeTextInstance).off(ActiveText.SCORMIntegration.SCORM_DATA_UPDATED, updateActivityState).on(ActiveText.SCORMIntegration.SCORM_DATA_UPDATED, updateActivityState);
    }

    function updateActivityForId(activityId, state) {
        var responses = getData();
        responses[activityId] = {status: state};

        var newEventData = {
            activityId: activityId,
            status: state
        };

        $(context).trigger(CHANGE, newEventData);
    }

    function onOverlayDataLoaded(event, data) {
        var scormActivityData = ActiveText.ExtensionUtils.getExtensionByKey(activeTextInstance, 'bugclubscorm');
        var validActivities = BugClub.ActivitySummaryUtils.getValidActivities(scormActivityData, data.data);
        var i, scormData, activityId;

        for(i in validActivities) {
            activityId = validActivities[i].data.id;
            if(!activityId) {
                activityId = data.index + i;
                debug.warn('Activity Id is missing for hotspot on page ' + data.index +
                    ': Using an autogenerated one instead.');
            }
            scormData = scormActivityData.getSCORMStateForKey(activityId);
            if(scormData) {
                updateActivityForId(activityId, getStateForActivity(scormData));
            } else {
                updateActivityForId(activityId, BugClub.ActivitySummaryStates.INCOMPLETE);
            }
        }
    }

    function updateActivityState(event, scormData) {
        var resultsObject, activityId;
        if(scormData && scormData.items) {
            resultsObject = scormData.items;
        } else {
            resultsObject = scormData;
        }

        for(activityId in resultsObject) {
            updateActivityForId(activityId, getStateForActivity(resultsObject[activityId]));
        }
    }

    function getStateForActivity(scormData) {
        var state = BugClub.ActivitySummaryStates.INCOMPLETE;

        if(scormData && scormData.completion_status !== undefined) {
            if(scormData.completion_status === 'incomplete') {
                state = BugClub.ActivitySummaryStates.PROGRESS;
            } else if(scormData.completion_status === 'completed') {
                state = BugClub.ActivitySummaryStates.COMPLETED;
            }
        }

        return state;
    }

    function getData() {
        if(!individualResponses || individualResponses.length === 0) {
            individualResponses = {};
        }
        return individualResponses;
    }

    return {
        init: init,
        getData: getData
    };
};